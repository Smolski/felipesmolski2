---
title: "Dashboard RPPS, RS - Brasil"
output:
  flexdashboard::flex_dashboard:
    orientation: rows
    vertical_layout: fill
    navbar:
    - { title: "INFO", href: "", align: left }
    includes:
      in_header: google-analytics.html
runtime: shiny
self_contained: TRUE
---

```{r global, include=FALSE}
options(warn = -1, width=180, scipen = 999, OutDec =",", digits=15)
knitr::opts_chunk$set(warning = FALSE, message = FALSE, comment = NA, scipen=999)

library(readr)
library(flexdashboard)

dair_carteira. = readRDS("dair_carteira.rds")

# source("carregar_dados.r")
# rm(dair_carteira)
gc(reset=TRUE)

to.factors <- function(df, variables){
  for (variable in variables){
    df[[variable]] <- as.factor(df[[variable]])
  }
  return(df)
}

# Número
to.numeric <- function(df, variables){
  for (variable in variables){
    df[[variable]] <- as.numeric(df[[variable]])
  }
  return(df)
}

numeric.vars = list("pc_cmn", "qt_rpps", "vl_atual_ativo", "vl_total_atual", "pc_rpps","vl_patrimonio","pc_patrimonio","taxa_adm", "taxa_custodia_max")

# categorical.vars = list("nr_cnpj_entidade", "sg_uf", "no_ente", "dt_mes_bimestre", "dt_ano", "no_segmento" , "no_tipo_ativo" , "cnpj_fundo" , "no_fundo","denom_social" , "condom", "negoc_merc" , "mercado" , "publico_alvo" , "reg_anbima" , "distrib" , "polit_invest" , "fundo_cotas" , "fundo_espelho" , "taxa_adm" , "param_taxa_perfm" ,"tp_fundo" ,"sit" ,"admin")

# dair_carteira. <- to.factors(df = dair_carteira., variables = categorical.vars)
dair_carteira. <- to.numeric(df = dair_carteira., variables = numeric.vars)



library(dplyr)
library(DT)
library(tidyr)
library(stringr)
library(ggplot2)
library(plotly)



dair_carteira. = dair_carteira. %>%
  arrange(desc(pc_rpps)) 

```


<!-- Sidebar {.sidebar} -->
<!-- =================================== -->



RPPS {.tabset .tabset-fade}
================================================================================

Row {data-height=50}
------------------------------------

```{r}
# dair_carteira. = dair_carteira.[order(dair_carteira.$no_ente, decreasing=FALSE),]

# Relação da Unidades da Federação
lista_uf <- sort(unique(dair_carteira.$sg_uf)) 

# Relação das UF
selectInput("UF", label = "Selecione a UF:", choices = lista_uf)

# Relação dos RPPS
uiOutput("municipios")

# Preciso saber o nome do Ente...
output$municipios <- renderUI(
    selectInput(inputId = "municipios",
                  label = "Selecione o Ente:",
                  choices = as.list(sort(unique(dair_carteira.$no_ente[dair_carteira.$sg_uf == input$UF])))
                ))



```

Row {.tabset .tabset-fade}
------------------------------------

### **APLICAÇÃO POR BANCO**


```{r}
tab_invest_banco <- reactive({

  req(input$UF)
  req(input$municipios)
  
  dair_carteira. %>%
      filter(sg_uf == input$UF,
             no_ente == input$municipios,
             max == 1) %>%
      select(data, no_fundo, admin, vl_total_atual, pc_rpps) %>%
      group_by(data, admin) %>%
      summarise(vl_total_atual = sum(vl_total_atual, na.rm = TRUE),
                 pc_rpps = sum(pc_rpps, na.rm=TRUE)) %>%
      spread(key = data, value = vl_total_atual) %>% 
      arrange(desc(pc_rpps)) 
})


renderDataTable(
  
  DT::datatable(
    tab_invest_banco(),
    rownames = FALSE
    # colnames = c("Tipo Ativo", str_to_title(format(as.Date(names(tab_invest_ente())[-1]), "%b/%y")))
  ) 
  %>%
  formatCurrency(columns = -1,
                 currency = "",
                 interval = 3,
                 mark = ".",
                 digits = 2,
                 dec.mark = ",",
                 before = TRUE)
)

```

### **APLICAÇÃO POR SEGMENTO**

```{r}
tab_invest_segm <- reactive({

  req(input$UF)
  req(input$municipios)
  
  dair_carteira. %>%
      filter(sg_uf == input$UF,
             no_ente == input$municipios,
             max == 1) %>%
      select(data, vl_total_atual, pc_rpps, pc_cmn, no_segmento) %>%
      group_by(data, no_segmento) %>%
      summarise(vl_total_atual = sum(vl_total_atual, na.rm = TRUE),
                 pc_rpps = sum(pc_rpps, na.rm=TRUE)) %>%
      spread(key = data, value = vl_total_atual) %>% 
      arrange(desc(pc_rpps)) 
})


renderDataTable(
  
  datatable(
    tab_invest_segm(),
    rownames = FALSE
    # colnames = c("Tipo Ativo", str_to_title(format(as.Date(names(tab_invest_ente())[-1]), "%b/%y")))
  ) 
  %>%
  formatCurrency(columns = -1,
                 currency = "",
                 interval = 3,
                 mark = ".",
                 digits = 2,
                 dec.mark = ",",
                 before = TRUE)
)
```


### **APLICAÇÃO POR ARTIGO**

```{r}
tab_invest_ente <- reactive({

  req(input$UF)
  req(input$municipios)
  
  dair_carteira. %>%
      filter(sg_uf == input$UF,
             no_ente == input$municipios,
             max == 1) %>%
      select(data, no_tipo_ativo, vl_total_atual, pc_rpps, pc_cmn) %>%
      group_by(data, no_tipo_ativo) %>%
      summarise(vl_total_atual = sum(vl_total_atual, na.rm = TRUE),
                 pc_rpps = sum(pc_rpps, na.rm=TRUE),
                 pc_cmn =  mean(pc_cmn)) %>%
      spread(key = data, value = vl_total_atual) %>% 
      arrange(desc(pc_rpps)) 
})


renderDataTable(
  
  datatable(
    tab_invest_ente(),
    rownames = FALSE
    # colnames = c("Tipo Ativo", str_to_title(format(as.Date(names(tab_invest_ente())[-1]), "%b/%y")))
  ) 
  %>%
  formatCurrency(columns = -1,
                 currency = "",
                 interval = 3,
                 mark = ".",
                 digits = 2,
                 dec.mark = ",",
                 before = TRUE)
)

```



### **APLICAÇÃO POR FUNDO**

```{r}
tab_invest_fundo <- reactive({

  req(input$UF)
  req(input$municipios)
  
  dair_carteira. %>%
      filter(sg_uf == input$UF,
             no_ente == input$municipios,
             max == 1) %>%
      select(data, no_fundo, admin, vl_total_atual, pc_rpps, pc_cmn, taxa_adm, taxa_perfm, cnpj_fundo, no_tipo_ativo) %>%
      group_by(data, no_fundo, cnpj_fundo, admin, no_tipo_ativo) %>%
      summarise(vl_total_atual = sum(vl_total_atual, na.rm = TRUE),
                taxa_adm = mean(taxa_adm),
                taxa_perform = mean(taxa_perfm),
                 pc_rpps = sum(pc_rpps, na.rm=TRUE),
                 pc_cmn =  mean(pc_cmn),
                # admin = admin
                 ) %>%
      spread(key = data, value = vl_total_atual) %>% 
      arrange(desc(pc_rpps)) 
})


renderDataTable(
  
  datatable(
    tab_invest_fundo(),
    rownames = FALSE,
    extensions = 'FixedHeader',
                  options = list(
                    scrollY = 400,
                    fixedHeader = TRUE,
                    scrollX = TRUE)
    # colnames = c("Tipo Ativo", str_to_title(format(as.Date(names(tab_invest_ente())[-1]), "%b/%y")))
  ) 
  %>%
  formatCurrency(columns = -c(1:4),
                 currency = "",
                 interval = 3,
                 mark = ".",
                 digits = 2,
                 dec.mark = ",",
                 before = TRUE)
)

```


### **HISTÓRICO**

```{r}
base <- as.list(unique(dair_carteira.$admin))

my_theme <- function() {
  # Colors
  color.background = "white"
  color.text = "#22211d"
  # Begin construction of chart
  theme_bw(base_size=15) +
    # Format background colors
    theme(panel.background = element_rect(fill=color.background, color=color.background)) +
    theme(plot.background  = element_rect(fill=color.background, color=color.background)) +
    theme(panel.border     = element_rect(color=color.background)) +
    theme(strip.background = element_rect(fill=color.background, color=color.background)) +
    # Format the grid
    # theme(panel.grid.major.y = element_blank()) +
    # theme(panel.grid.minor.y = element_blank()) +
    theme(axis.ticks       = element_blank()) +
    # Format the legend
    theme(legend.position = "none") +
    # Format title and axis labels
    theme(plot.title       = element_text(color=color.text, size=20, face = "bold")) +
    theme(axis.title.x     = element_text(size=14, color="black", face = "bold")) +
    theme(axis.title.y     = element_text(size=14, color="black", face = "bold", vjust=1.25)) +
    theme(axis.text.x      = element_text(size=10, vjust=0.5, hjust=0.5, color = color.text)) +
    theme(axis.text.y      = element_text(size=10, color = color.text)) +
    theme(strip.text       = element_text(face = "bold")) +
    # Plot margins
    theme(plot.margin = unit(c(1.50, 0.2, 0.3, .50), "cm")) +
    theme(axis.text.x = element_text(angle=90, hjust = 1))+
    theme(axis.ticks = element_blank(),
        axis.text.y = element_text(hjust = 1, margin = margin(0,-3,0,0)))
}

tab_invest_rank<- reactive({
  
(ranking = dair_carteira. %>%
  filter(sg_uf == input$UF,
         no_ente == input$municipios) %>%
  select(data, no_fundo, admin, vl_total_atual, pc_rpps) %>%
  group_by(data, admin) %>%
  summarise(vl_total_atual = sum(vl_total_atual, na.rm = TRUE),
            pc_rpps = sum(pc_rpps, na.rm=TRUE)) %>%
  arrange(data, desc(pc_rpps)) %>% 
  tidyr::drop_na() %>%
  mutate(ranking = row_number()) %>% 
  as.data.frame() %>%
  mutate(flag = ifelse(admin %in% c(base), TRUE, FALSE),
         country_col = ifelse(flag == TRUE, admin, "zzz"),
         admin = stringr::word(admin, 1,1:5)))

})


renderPlot({
  ggplot(tab_invest_rank(), aes(x = data, y = ranking, group = country_col)) +
  geom_point(color = "#FFFFFF", size = 4) +
  geom_point(aes(color = country_col, alpha = 1), size = 4) +
  geom_point(color = "#FFFFFF", size = 1) +
  geom_line(aes(color = country_col, alpha = 1), size = 2) +
  scale_y_reverse(breaks = 1:36, expand = c(.05, .05)) +
  scale_x_continuous(breaks = 2020.1:2021.8, expand = c(1.05, 1.05)) +
  geom_text(tab_invest_rank() %>% filter(data == min(data)),
            mapping = aes(label = admin) , hjust = 0 , vjust = 2.15, fontface = "bold", color = "#888888", size = 4) +
  geom_text(tab_invest_rank() %>% filter(data == max(data)),
            mapping = aes(label = admin) , hjust = 1 ,vjust = 2.15, fontface = "bold", color = "#888888", size = 4) +
  labs(x = "Data",
       y = "Ranking",
       title = "Preferência aplicações do RPPS por Banco",
       subtitle = "Ranking") +
  my_theme() +
  scale_color_manual(values = c("blue","orange","gray","green","red","yellow", "purple", "black","cyan"))+
  scale_x_date(date_breaks="1 month", labels = scales::date_format("%Y-%m"))
  
})
```

### **HISTÓRICO VALORES**

```{r}
tab_invest_rank2<- reactive({
  
dair_carteira. %>%
  filter(sg_uf == input$UF,
         no_ente == input$municipios) %>%
  select(data, no_fundo, admin, vl_total_atual, pc_rpps) %>%
  group_by(data, admin) %>%
  summarise(vl_total_atual = sum(vl_total_atual, na.rm = TRUE),
            pc_rpps = sum(pc_rpps, na.rm=TRUE)) %>%
  arrange(data, desc(pc_rpps)) %>% 
  tidyr::drop_na() %>%
  mutate(ranking = row_number()) %>% 
  as.data.frame() %>%
  mutate(flag = ifelse(admin %in% c(base), TRUE, FALSE),
         country_col = ifelse(flag == TRUE, admin, "zzz"),
         admin = stringr::word(admin, 1,1:5))

})

renderPlotly({

ggplot(tab_invest_rank2(), aes(x = data, y = vl_total_atual, group = country_col)) +
  geom_line(aes(color = country_col), size = 2) +
  # geom_point(color = "#FFFFFF", size = 4) +
  # geom_point(aes(color = country_col, alpha = 1), size = 4) +
  # geom_point(color = "#FFFFFF", size = 1) +
  scale_y_reverse(breaks = 1:36, expand = c(.05, .05)) +
  # scale_y_continuous(labels = label_number(prefix = "R$ ", big.mark = ".", decimal.mark = ",")) 
  geom_text(tab_invest_rank2() %>% filter(data == min(data)),
            mapping = aes(label = admin), hjust = 0 , vjust = 2.15, fontface = "bold", color = "#888888", size = 4) +
  geom_text(tab_invest_rank2() %>% filter(data == max(data)),
  mapping = aes(label = admin), hjust = 1 , vjust = 2.15, fontface = "bold", color = "#888888", size = 4) +
  labs(x = "Data",
       y = "R$",
       title = "Preferência aplicações do RPPS por Banco",
       subtitle = "Valores") +
  my_theme() +
  scale_color_manual(values = c("blue","orange","gray","green","red","yellow", "purple", "black", "cyan"))+
  scale_x_date(date_breaks="1 month", labels = scales::date_format("%Y-%m"))+
  scale_y_continuous(labels = scales::label_number(prefix = "R$ ", big.mark = ".", decimal.mark = ","))
  
})
```





Global {.tabset .tabset-fade}
================================================================================


Column {.tabset .tabset-fade}
------------------------------------

### **PARTICIPAÇÃO POR BANCO** (sem Estado)

```{r}
tab_invest_banri<- reactive({
  
dair_carteira. %>%
  dplyr::select(data, no_ente, admin, vl_total_atual, pc_rpps) %>%
  dplyr::filter(no_ente != "Governo do Estado do Rio Grande do Sul") %>%
  group_by(data, admin) %>%
  summarise(vl_total_atual = sum(vl_total_atual, na.rm = TRUE)) %>%
  mutate(percentage = round(vl_total_atual / sum(vl_total_atual),2))
})


renderPlotly({
  

ggplot(tab_invest_banri(), aes(x = data, y = percentage, fill=admin)) +
  # geom_line(aes(color = no_ente, alpha = 1), size = 2) +
  # geom_boxplot()+
  # geom_bar(stat="bin")+  
    geom_area()+
  theme(legend.position = "left") +
    # geom_point(aes(color = no_ente, alpha = 1), size = 2)+
    # geom_smooth()+
  # geom_point(color = "#FFFFFF", size = 4) +
  # geom_point(aes(color = no_ente, alpha = 1), size = 4) +
  # geom_point(color = "#FFFFFF", size = 1) +
  # scale_y_reverse(breaks = 1:36, expand = c(.05, .05)) +
  # geom_text(tab_invest_banri() %>% filter(data == min(data)),
  #           mapping = aes(label = no_ente), hjust = 0 , vjust = 2.15, fontface = "bold", color = "#888888", size = 4) +
  # geom_text(tab_invest_banri() %>% filter(data == max(data)),
  # mapping = aes(label = no_ente), hjust = 1 , vjust = 2.15, fontface = "bold", color = "#888888", size = 4) +
  labs(x = "Data",
       y = "% (x100)",
       title = "Participação aplicações do RPPS por Banco",
       subtitle = "Valores") +
  my_theme() +
  # scale_color_manual(values = c("blue","orange","gray","green","red","yellow", "purple", "black", "cyan"))+
  scale_x_date(date_breaks="1 month", labels = scales::date_format("%Y-%m"))
  # scale_y_continuous(labels = scales::label_number(prefix = "R$ ", big.mark = ".", decimal.mark = ","))
  
})

```

### **PARTICIPAÇÃO POR SEGMENTO** (sem Estado)

```{r}
tab_invest_segag<- reactive({
  
dair_carteira. %>%
  dplyr::select(data, no_ente, no_segmento, vl_total_atual, pc_rpps) %>%
  dplyr::filter(no_ente != "Governo do Estado do Rio Grande do Sul") %>%
  group_by(data, no_segmento) %>%
  summarise(vl_total_atual = sum(vl_total_atual, na.rm = TRUE)) %>%
  mutate(percentage = round(vl_total_atual / sum(vl_total_atual),2))
})


renderPlotly({
  

ggplot(tab_invest_segag(), aes(x = data, y = percentage, fill=no_segmento)) +
  # geom_line(aes(color = no_ente, alpha = 1), size = 2) +
  # geom_boxplot()+
  # geom_bar(stat="bin")+  
    geom_area()+
  theme(legend.position = "left") +
    # geom_point(aes(color = no_ente, alpha = 1), size = 2)+
    # geom_smooth()+
  # geom_point(color = "#FFFFFF", size = 4) +
  # geom_point(aes(color = no_ente, alpha = 1), size = 4) +
  # geom_point(color = "#FFFFFF", size = 1) +
  # scale_y_reverse(breaks = 1:36, expand = c(.05, .05)) +
  # geom_text(tab_invest_banri() %>% filter(data == min(data)),
  #           mapping = aes(label = no_ente), hjust = 0 , vjust = 2.15, fontface = "bold", color = "#888888", size = 4) +
  # geom_text(tab_invest_banri() %>% filter(data == max(data)),
  # mapping = aes(label = no_ente), hjust = 1 , vjust = 2.15, fontface = "bold", color = "#888888", size = 4) +
  labs(x = "Data",
       y = "% (x100)",
       title = "Participação aplicações do RPPS por Segmento",
       subtitle = "Part.") +
  my_theme() +
  # scale_color_manual(values = c("blue","orange","gray","green","red","yellow", "purple", "black", "cyan"))+
  scale_x_date(date_breaks="1 month", labels = scales::date_format("%Y-%m"))
  # scale_y_continuous(labels = scales::label_number(prefix = "R$ ", big.mark = ".", decimal.mark = ","))
  
})

```

### **PARTICIPAÇÃO POR ARTIGO** (sem Estado)

```{r}
tab_invest_art<- reactive({
  
dair_carteira. %>%
  dplyr::select(data, no_ente, no_tipo_ativo, vl_total_atual, pc_rpps) %>%
  dplyr::filter(no_ente != "Governo do Estado do Rio Grande do Sul") %>%
  group_by(data, no_tipo_ativo) %>%
  summarise(vl_total_atual = sum(vl_total_atual, na.rm = TRUE)) %>%
  mutate(percentage = round(vl_total_atual / sum(vl_total_atual),2))
})


renderPlotly({
  

ggplot(tab_invest_art(), aes(x = data, y = percentage, fill=no_tipo_ativo)) +
  # geom_line(aes(color = no_ente, alpha = 1), size = 2) +
  # geom_boxplot()+
  # geom_bar(stat="bin")+  
    geom_area()+
  theme(legend.position = "left") +
    # geom_point(aes(color = no_ente, alpha = 1), size = 2)+
    # geom_smooth()+
  # geom_point(color = "#FFFFFF", size = 4) +
  # geom_point(aes(color = no_ente, alpha = 1), size = 4) +
  # geom_point(color = "#FFFFFF", size = 1) +
  # scale_y_reverse(breaks = 1:36, expand = c(.05, .05)) +
  # geom_text(tab_invest_banri() %>% filter(data == min(data)),
  #           mapping = aes(label = no_ente), hjust = 0 , vjust = 2.15, fontface = "bold", color = "#888888", size = 4) +
  # geom_text(tab_invest_banri() %>% filter(data == max(data)),
  # mapping = aes(label = no_ente), hjust = 1 , vjust = 2.15, fontface = "bold", color = "#888888", size = 4) +
  labs(x = "Data",
       y = "% (x100)",
       title = "Participação aplicações do RPPS por Artigo",
       subtitle = "Part.") +
  my_theme() +
  # scale_color_manual(values = c("blue","orange","gray","green","red","yellow", "purple", "black", "cyan"))+
  scale_x_date(date_breaks="1 month", labels = scales::date_format("%Y-%m"))
  # scale_y_continuous(labels = scales::label_number(prefix = "R$ ", big.mark = ".", decimal.mark = ","))
  
})

```

### **BB**

```{r}
tab_invest_bb <- reactive({

  req(input$UF)
  req(input$municipios)
  
  dair_carteira. %>%
      filter(sg_uf == input$UF,
             # no_ente == input$municipios,
             admin == "BB GESTAO DE RECURSOS DTVM S.A",
             no_ente != "Governo do Estado do Rio Grande do Sul",
             max == 1) %>%
      select(data, no_fundo, no_ente, admin, vl_total_atual, pc_rpps, pc_cmn, taxa_adm, taxa_perfm, cnpj_fundo) %>%
      group_by(data, no_ente) %>%
      summarise(vl_total_atual = sum(vl_total_atual, na.rm = TRUE),
                pc_rpps = sum(pc_rpps, na.rm=TRUE)
                 ) %>%
      # spread(key = data, value = vl_total_atual) %>% 
      arrange(desc(vl_total_atual)) 
})


renderDataTable(
  
  datatable(
    tab_invest_bb(),
    rownames = FALSE,
    extensions = 'FixedHeader',
                  options = list(
                    fixedHeader = TRUE,
                    scrollX = TRUE)
    # colnames = c("Tipo Ativo", str_to_title(format(as.Date(names(tab_invest_ente())[-1]), "%b/%y")))
  ) 
  %>%
  formatCurrency(columns = -c(1:2),
                 currency = "",
                 interval = 3,
                 mark = ".",
                 digits = 2,
                 dec.mark = ",",
                 before = TRUE)
)

```


### **CEF**

```{r}
tab_invest_cef <- reactive({

  req(input$UF)
  req(input$municipios)
  
  dair_carteira. %>%
      filter(sg_uf == input$UF,
             # no_ente == input$municipios,
             admin == "CAIXA ECONOMICA FEDERAL",
             no_ente != "Governo do Estado do Rio Grande do Sul",
             max == 1) %>%
      select(data, no_fundo, no_ente, admin, vl_total_atual, pc_rpps, pc_cmn, taxa_adm, taxa_perfm, cnpj_fundo) %>%
      group_by(data, no_ente) %>%
      summarise(vl_total_atual = sum(vl_total_atual, na.rm = TRUE),
                pc_rpps = sum(pc_rpps, na.rm=TRUE)
                 ) %>%
      # spread(key = data, value = vl_total_atual) %>% 
      arrange(desc(vl_total_atual)) 
})


renderDataTable(
  
  datatable(
    tab_invest_cef(),
    rownames = FALSE,
    extensions = 'FixedHeader',
                  options = list(
                    fixedHeader = TRUE,
                    scrollX = TRUE)
    # colnames = c("Tipo Ativo", str_to_title(format(as.Date(names(tab_invest_ente())[-1]), "%b/%y")))
  ) 
  %>%
  formatCurrency(columns = -c(1:2),
                 currency = "",
                 interval = 3,
                 mark = ".",
                 digits = 2,
                 dec.mark = ",",
                 before = TRUE)
)
```


### **BANRISUL**

```{r}
tab_invest_brisul <- reactive({

  req(input$UF)
  req(input$municipios)
  
  dair_carteira. %>%
      filter(sg_uf == input$UF,
             # no_ente == input$municipios,
             admin == "BANRISUL S.A. CORRETORA DE VALORES MOBILIÁRIOS E CÂMBIO",
             no_ente != "Governo do Estado do Rio Grande do Sul",
             max == 1) %>%
      select(data, no_fundo, no_ente, admin, vl_total_atual, pc_rpps, pc_cmn, taxa_adm, taxa_perfm, cnpj_fundo) %>%
      group_by(data, no_ente) %>%
      summarise(vl_total_atual = sum(vl_total_atual, na.rm = TRUE),
                pc_rpps = sum(pc_rpps, na.rm=TRUE)
                 ) %>%
      # spread(key = data, value = vl_total_atual) %>% 
      arrange(desc(vl_total_atual)) 
})


renderDataTable(
  
  datatable(
    tab_invest_brisul(),
    rownames = FALSE,
    extensions = 'FixedHeader',
                  options = list(
                    fixedHeader = TRUE,
                    scrollX = TRUE)
    # colnames = c("Tipo Ativo", str_to_title(format(as.Date(names(tab_invest_ente())[-1]), "%b/%y")))
  ) 
  %>%
  formatCurrency(columns = -c(1:2),
                 currency = "",
                 interval = 3,
                 mark = ".",
                 digits = 2,
                 dec.mark = ",",
                 before = TRUE)
)
```

### **SICREDI**


```{r}
tab_invest_sicre <- reactive({

  req(input$UF)
  req(input$municipios)
  
  dair_carteira. %>%
      filter(sg_uf == input$UF,
             # no_ente == input$municipios,
             admin == "BANCO COOPERATIVO SICREDI S.A.",
             no_ente != "Governo do Estado do Rio Grande do Sul",
             max == 1) %>%
      select(data, no_fundo, no_ente, admin, vl_total_atual, pc_rpps, pc_cmn, taxa_adm, taxa_perfm, cnpj_fundo) %>%
      group_by(data, no_ente) %>%
      summarise(vl_total_atual = sum(vl_total_atual, na.rm = TRUE),
                pc_rpps = sum(pc_rpps, na.rm=TRUE)
                 ) %>%
      # spread(key = data, value = vl_total_atual) %>% 
      arrange(desc(vl_total_atual)) 
})


renderDataTable(
  
  datatable(
    tab_invest_sicre(),
    rownames = FALSE,
    extensions = 'FixedHeader',
                  options = list(
                    fixedHeader = TRUE,
                    scrollX = TRUE)
    # colnames = c("Tipo Ativo", str_to_title(format(as.Date(names(tab_invest_ente())[-1]), "%b/%y")))
  ) 
  %>%
  formatCurrency(columns = -c(1:2),
                 currency = "",
                 interval = 3,
                 mark = ".",
                 digits = 2,
                 dec.mark = ",",
                 before = TRUE)
)
```

### **DISPONIBILIDADES**

```{r}
tab_invest_disp <- reactive({

  req(input$UF)
  req(input$municipios)
  
  dair_carteira. %>%
    dplyr::filter(sg_uf == input$UF,
                  # no_ente == input$municipios,
                  no_ente != "Governo do Estado do Rio Grande do Sul",
                  no_segmento == "Disponibilidades Financeiras",
                  # admin == "BANRISUL S.A. CORRETORA DE VALORES MOBILIÁRIOS E CÂMBIO",
                  max == 1) %>%
    dplyr::select(data, no_ente, no_segmento, vl_total_atual, pc_rpps,admin) %>%  
    group_by(data, no_ente) %>%
    summarise(vl_total_atual = sum(vl_total_atual, na.rm = TRUE),
              pc_rpps = sum(pc_rpps, na.rm=TRUE)
    ) %>%
    # spread(key = data, value = vl_total_atual) %>% 
    arrange(desc(vl_total_atual)) 
})


renderDataTable(
  
  datatable(
    tab_invest_disp(),
    rownames = FALSE,
    extensions = 'FixedHeader',
                  options = list(
                    fixedHeader = TRUE,
                    scrollX = TRUE)
    # colnames = c("Tipo Ativo", str_to_title(format(as.Date(names(tab_invest_ente())[-1]), "%b/%y")))
  ) 
  %>%
  formatCurrency(columns = -c(1:2),
                 currency = "",
                 interval = 3,
                 mark = ".",
                 digits = 2,
                 dec.mark = ",",
                 before = TRUE)
)
```

### **ETF por RPPS**

```{r}
tab_invest_etf <- reactive({

  req(input$UF)
  req(input$municipios)
  
  dair_carteira. %>%
    dplyr::filter(sg_uf == input$UF,
                  # no_ente == input$municipios,
                  no_ente != "Governo do Estado do Rio Grande do Sul",
                  # no_segmento == "Disponibilidades Financeiras",
                  str_detect(no_tipo_ativo, 'ETF'),
                  # admin == "BANRISUL S.A. CORRETORA DE VALORES MOBILIÁRIOS E CÂMBIO",
                  max == 1) %>%
    
    dplyr::select(data, no_ente,no_fundo, no_segmento, vl_total_atual, pc_rpps,admin,cnpj_fundo) %>%  
    group_by(data, no_ente, no_fundo, cnpj_fundo) %>%
    summarise(vl_total_atual = sum(vl_total_atual, na.rm = TRUE) 
              # ,pc_rpps = sum(pc_rpps, na.rm=TRUE
    ) %>%
    # spread(key = data, value = vl_total_atual) %>% 
    arrange(desc(vl_total_atual)) 
})


renderDataTable(
  
  datatable(
    tab_invest_etf(),
    rownames = FALSE,
    extensions = 'FixedHeader',
                  options = list(
                    scrollY = 400,
                    fixedHeader = TRUE,
                    scrollX = TRUE)
    # colnames = c("Tipo Ativo", str_to_title(format(as.Date(names(tab_invest_ente())[-1]), "%b/%y")))
  ) 
  %>%
  formatCurrency(columns = -c(1:4),
                 currency = "",
                 interval = 3,
                 mark = ".",
                 digits = 2,
                 dec.mark = ",",
                 before = TRUE)
)
```


### **ETF**

```{r}
tab_invest_etf2 <- reactive({

  req(input$UF)
  req(input$municipios)
  
  dair_carteira. %>%
    dplyr::filter(sg_uf == input$UF,
                  # no_ente == input$municipios,
                  no_ente != "Governo do Estado do Rio Grande do Sul",
                  # no_segmento == "Disponibilidades Financeiras",
                  str_detect(no_tipo_ativo, 'ETF'),
                  # admin == "BANRISUL S.A. CORRETORA DE VALORES MOBILIÁRIOS E CÂMBIO",
                  max == 1) %>%
    
    dplyr::select(data, no_ente,no_fundo, no_segmento, vl_total_atual, pc_rpps,admin,cnpj_fundo) %>%  
    group_by(data,no_fundo,cnpj_fundo) %>%
    summarise(vl_total_atual = sum(vl_total_atual, na.rm = TRUE) 
              # ,pc_rpps = sum(pc_rpps, na.rm=TRUE
    ) %>%
    # spread(key = data, value = vl_total_atual) %>% 
    arrange(desc(vl_total_atual)) 
})


renderDataTable(
  
  datatable(
    tab_invest_etf2(),
    rownames = FALSE,
    extensions = 'FixedHeader',
                  options = list(
                    scrollY = 400,
                    fixedHeader = TRUE,
                    scrollX = TRUE)
    # colnames = c("Tipo Ativo", str_to_title(format(as.Date(names(tab_invest_ente())[-1]), "%b/%y")))
  ) 
  %>%
  formatCurrency(columns = -c(1:3),
                 currency = "",
                 interval = 3,
                 mark = ".",
                 digits = 2,
                 dec.mark = ",",
                 before = TRUE)
)
```


### **Espelho por RPPS**

```{r}
tab_invest_esp <- reactive({

  req(input$UF)
  req(input$municipios)
  
  dair_carteira. %>%
    dplyr::filter(sg_uf == input$UF,
                  # no_ente == input$municipios,
                  no_ente != "Governo do Estado do Rio Grande do Sul",
                  # no_segmento == "Disponibilidades Financeiras",
                  fundo_espelho == "S",
                  # admin == "BANRISUL S.A. CORRETORA DE VALORES MOBILIÁRIOS E CÂMBIO",
                  max == 1) %>%
    
    dplyr::select(data, no_ente,no_fundo, fundo_espelho, vl_total_atual, pc_rpps,admin,cnpj_fundo) %>%  
    group_by(data, no_ente, no_fundo, cnpj_fundo) %>%
    summarise(vl_total_atual = sum(vl_total_atual, na.rm = TRUE) 
              # ,pc_rpps = sum(pc_rpps, na.rm=TRUE
    ) %>%
    # spread(key = data, value = vl_total_atual) %>% 
    arrange(desc(vl_total_atual)) 
})


renderDataTable(
  
  datatable(
    tab_invest_esp(),
    rownames = FALSE,
    extensions = 'FixedHeader',
                  options = list(
                    scrollY = 400,
                    fixedHeader = TRUE,
                    scrollX = TRUE)
    # colnames = c("Tipo Ativo", str_to_title(format(as.Date(names(tab_invest_ente())[-1]), "%b/%y")))
  ) 
  %>%
  formatCurrency(columns = -c(1:4),
                 currency = "",
                 interval = 3,
                 mark = ".",
                 digits = 2,
                 dec.mark = ",",
                 before = TRUE)
)
```

### **Entrega DAIR noro**

```{r}
tab_invest_dair<- reactive({
  
dair_carteira. %>%
  select(data, no_fundo, admin, vl_total_atual, pc_rpps, micro, no_ente) %>%
  dplyr::filter(micro>0) %>%
  group_by(data) %>%
  summarise(dair = n_distinct(no_ente)) %>%
  arrange(data) %>% 
  tidyr::drop_na() %>%
  as.data.frame()

  
})

renderPlotly({

  
ggplot(tab_invest_dair(), aes(x = data, y = dair)) +
  geom_line() +
  # geom_point(color = "#FFFFFF", size = 4) +
  # geom_point(aes(color = country_col, alpha = 1), size = 4) +
  # geom_point(color = "#FFFFFF", size = 1) +
  scale_y_reverse(breaks = 1:36, expand = c(.05, .05)) +
  # scale_y_continuous(labels = label_number(prefix = "R$ ", big.mark = ".", decimal.mark = ",")) 
  # geom_text(tab_invest_dair() %>% filter(data == min(data)),
  #           # mapping = aes(label = micro), 
  #           hjust = 0 , vjust = 2.15, fontface = "bold", color = "#888888", size = 4) +
  # geom_text(tab_invest_dair() %>% filter(data == max(data)),
  # # mapping = aes(label = micro), 
  # hjust = 1 , vjust = 2.15, fontface = "bold", color = "#888888", size = 4) +
  labs(x = "Data",
       y = "qtd",
       title = "Entrega DAIR",
       subtitle = "qtd") +
  my_theme() +
  scale_color_manual(values = c("blue","orange","gray","green","red","yellow", "purple", "black", "cyan"))+
  scale_x_date(date_breaks="1 month", labels = scales::date_format("%Y-%m"))+
  scale_y_continuous()
  
})


```


### **Part Noro**

```{r}
tab_invest_noro<- reactive({
  
dair_carteira. %>%
  select(data, no_fundo, admin, vl_total_atual, pc_rpps, micro) %>%
  dplyr::filter(micro>0,
                admin == "BANRISUL S.A. CORRETORA DE VALORES MOBILIÁRIOS E CÂMBIO") %>%
  group_by(data, micro) %>%
  summarise(vl_total_atual = sum(vl_total_atual, na.rm = TRUE),
            pc_rpps = sum(pc_rpps, na.rm=TRUE)) %>%
  arrange(data, desc(pc_rpps)) %>% 
  tidyr::drop_na() %>%
  as.data.frame()

  
})

renderPlotly({

  
ggplot(tab_invest_noro(), aes(x = data, y = vl_total_atual, group = micro)) +
  geom_line(aes(color = micro), size = 2) +
  # geom_point(color = "#FFFFFF", size = 4) +
  # geom_point(aes(color = country_col, alpha = 1), size = 4) +
  # geom_point(color = "#FFFFFF", size = 1) +
  scale_y_reverse(breaks = 1:36, expand = c(.05, .05)) +
  # scale_y_continuous(labels = label_number(prefix = "R$ ", big.mark = ".", decimal.mark = ",")) 
  geom_text(tab_invest_noro() %>% filter(data == min(data)),
            mapping = aes(label = micro), hjust = 0 , vjust = 2.15, fontface = "bold", color = "#888888", size = 4) +
  geom_text(tab_invest_noro() %>% filter(data == max(data)),
  mapping = aes(label = micro), hjust = 1 , vjust = 2.15, fontface = "bold", color = "#888888", size = 4) +
  labs(x = "Data",
       y = "R$",
       title = "Preferência aplicações do RPPS por Micro",
       subtitle = "Valores") +
  my_theme() +
  scale_color_manual(values = c("blue","orange","gray","green","red","yellow", "purple", "black", "cyan"))+
  scale_x_date(date_breaks="1 month", labels = scales::date_format("%Y-%m"))+
  scale_y_continuous(labels = scales::label_number(prefix = "R$ ", big.mark = ".", decimal.mark = ","))
  
})

```

Sobre {.tabset .tabset-fade}
================================================================================

Row {.tabset .tabset-fade}
------------------------------------

### **Enquadramento**


```{r}
tab_invest_cmn <- reactive({

  req(input$UF)

  dair_carteira. %>%
    filter(sg_uf == input$UF,
           max == 1) %>%
    select(no_tipo_ativo, pc_cmn) %>%
    group_by(no_tipo_ativo, pc_cmn) %>% 
    arrange(desc(pc_cmn)) %>%
    tidyr::drop_na()  %>%  
    distinct(no_tipo_ativo)  
})



renderDataTable(
  
  DT::datatable(
    tab_invest_cmn(),
    rownames = FALSE
    # colnames = c("Tipo Ativo", str_to_title(format(as.Date(names(tab_invest_ente())[-1]), "%b/%y")))
  ) 
  %>%
  formatCurrency(columns = -1,
                 currency = "",
                 interval = 3,
                 mark = ".",
                 digits = 2,
                 dec.mark = ",",
                 before = TRUE)
)
```


### **Fontes**

**Informações dos Regimes Públicos de Previdência Social - CADPREV**

https://www.gov.br/conecta/catalogo/apis/cadprev

**API CADPREV**

https://apicadprev.economia.gov.br/api-docs/

Agradecimento especial ao **Marcos F Silva** da Audinalytics.

https://audinalytics.netlify.app/

### **Autor**

Felipe Micail da Silva Smolski
---
title: "Dashboard Mercado"
output:
  flexdashboard::flex_dashboard:
  orientation: rows
vertical_layout: fill
navbar:
  - { title: "INFO", href: "", align: left }
runtime: shiny
self_contained: TRUE
---

```{r global, include=FALSE}
options(warn = -1, width=180, scipen = 999, OutDec =",", digits=15)
knitr::opts_chunk$set(warning = FALSE, message = FALSE, comment = NA, scipen=999)


library(shiny)
library(quantmod)
library(shinyWidgets)
library(BatchGetSymbols)
library(highcharter)
library(dplyr)

# SP500
df.sp500 <- GetSP500Stocks()
#tickers <- df.sp500$tickers
colnames(df.sp500)[1]='cod'
colnames(df.sp500)[2]='company'


# IBOVESPA
# df.ibov <- GetIbovStocks()
library(readr)
df.ibov = read_delim("IBOVDia_12-01-22.csv",
                     ";", escape_double = FALSE, locale = locale(encoding = "ISO-8859-1"),
                     trim_ws = TRUE, skip = 1)
colnames(df.ibov)[2]='company'
colnames(df.ibov)[1]='tickers'
print(df.ibov$tickers)
df.ibov$cod=paste0(df.ibov$tickers, '.SA')
acoes=as.data.frame(rbind(df.ibov[c(6,2)],df.sp500[1:2]))

## ETFs selecioinados
etf = data.frame(
  stringsAsFactors = FALSE,
  cod = c("BOVA11","IVVB11","SMAL11",
          "ECOO11","BRAX11","BOVV11","DIVO11","SMAC11",
          "MATB11","IRFM11","IB5M11","FIXA11","IMAB11",
          "XFIX11","XINA11","NASD11","EURP11","ACWI11",
          "EMEG11","ASIA11","ESGB11","HTEK11","TECK11",
          "DNAI11","MILL11","GOVE11", "SPXI11"), company = 1
)
etf$cod=paste0(etf$cod, '.SA')
acoes=as.data.frame(rbind(etf, acoes))

```


<!-- Sidebar {.sidebar} -->
<!-- =================================== -->

  
  

  
```{r}

# helpText("Selecione uma ação. Fonte: Yahoo finance.")

# textInput("siglas", "Siglas", "DIS"),
selectInput(inputId = "siglas",
            label = "Códigos Ações -  Fonte: Yahoo finance.",
            choices = acoes$cod
            # selectize=FALSE
            # selected = 1
)
# dair_carteira. = dair_carteira.[order(dair_carteira.$no_ente, decreasing=FALSE),]

# # Relação da Unidades da Federação
# lista_uf <- sort(unique(dair_carteira.$sg_uf)) 
# 
# # Relação das UF
# selectInput("UF", label = "Selecione a UF:", choices = lista_uf)
# 
# # Relação dos RPPS
# uiOutput("municipios")
# 
# # Preciso saber o nome do Ente...
# output$municipios <- renderUI(
#   selectInput(inputId = "municipios",
#               label = "Selecione o Ente:",
#               choices = as.list(sort(unique(dair_carteira.$no_ente[dair_carteira.$sg_uf == input$UF])))
#   ))



```

Renda Variável 
================================================================================
  
Row {.tabset data-width=600}
------------------------------------

### Papel

```{r}
  data <- reactive({
    cat("Yahoo Finance \n")
    getSymbols(input$siglas, src = "yahoo",
               # from = input$fechas[1],
               # to = input$fechas[2],
               auto.assign = FALSE)
  })




renderHighchart({
      
      
  hchart(data()) %>%
    hc_add_series(SMA(Cl(data()), n = 10), yAxis = 0, name = "Fast MA 10") %>% 
    hc_add_series(SMA(Cl(data()), n = 500), yAxis = 0, name = "Slow MA 500")
  # hc_add_series(data()[,5], color = "gray", yAxis = 1, name = "Volume", type = "column")
    # hc_add_series(xts(rep(70, NROW(data())), index(data())), color = hex_to_rgba("red", 0.7),
    #             yAxis = 2, name = "Sell level") %>% 
    # hc_add_series(xts(rep(30, NROW(data())), index(data())), color = hex_to_rgba("blue", 0.7),
    #               yAxis = 2, name = "Buy level") 
      
    })   

```


Row {.tabset}
------------------------------------


### Rent. Anual

```{r}
renderHighchart({
hchart(round(annualReturn(data(), type='arithmetic')*100,2), 
       color = "gray",  name = "%", type = "column")
}) 
```


### Rent. Mês
   

```{r}
renderHighchart({
hchart(round(monthlyReturn(data(), type='arithmetic')*100,2), 
       color = "gray",  name = "%", type = "column")
}) 
```

### Rent. Semanal
   

```{r}
renderHighchart({
hchart(round(weeklyReturn(data(), type='arithmetic')*100,2), 
       color = "gray",  name = "%", type = "column")
}) 
```


### Rent. Diária
   

```{r}
renderHighchart({
hchart(round(dailyReturn(data(), type='arithmetic')*100,2), 
       color = "gray",  name = "%", type = "column")
}) 
```
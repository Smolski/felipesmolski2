# rm(dair_carteira)
gc(reset=TRUE)
to.factors <- function(df, variables){
for (variable in variables){
df[[variable]] <- as.factor(df[[variable]])
}
return(df)
}
# Número
to.numeric <- function(df, variables){
for (variable in variables){
df[[variable]] <- as.numeric(df[[variable]])
}
return(df)
}
numeric.vars = list("pc_cmn", "qt_rpps", "vl_atual_ativo", "vl_total_atual", "pc_rpps","vl_patrimonio","pc_patrimonio","taxa_adm", "taxa_custodia_max")
# categorical.vars = list("nr_cnpj_entidade", "sg_uf", "no_ente", "dt_mes_bimestre", "dt_ano", "no_segmento" , "no_tipo_ativo" , "cnpj_fundo" , "no_fundo","denom_social" , "condom", "negoc_merc" , "mercado" , "publico_alvo" , "reg_anbima" , "distrib" , "polit_invest" , "fundo_cotas" , "fundo_espelho" , "taxa_adm" , "param_taxa_perfm" ,"tp_fundo" ,"sit" ,"admin")
# dair_carteira. <- to.factors(df = dair_carteira., variables = categorical.vars)
dair_carteira. <- to.numeric(df = dair_carteira., variables = numeric.vars)
library(dplyr)
library(DT)
library(tidyr)
library(stringr)
library(ggplot2)
library(plotly)
dair_carteira. = dair_carteira. %>%
arrange(desc(pc_rpps))
runApp('C:/Users/felip/Desktop/GNG/app_acoes-master')
max(dair_carteira.$data)
dair_carteira. %>%
filter(sg_uf == "RS",
no_ente == "Alecrim",
data == max(data)) %>%
select(data, no_fundo, admin, vl_total_atual, pc_rpps) %>%
group_by(data, admin) %>%
summarise(vl_total_atual = sum(vl_total_atual, na.rm = TRUE),
pc_rpps = sum(pc_rpps, na.rm=TRUE)) %>%
spread(key = data, value = vl_total_atual) %>%
arrange(desc(pc_rpps))
#Orgaos
library(readr)
orgaos <- read_csv("C:/Users/felip/Desktop/GNG/rpps/orgaos_auditados_rs.csv")
names(orgaos) = tolower(names(orgaos))
#
library(httr)
#
#
# RPPS
get_dair_carteira2021 <- function(...){
#
# Opções de consulta disponíveis para a função
# #---------------------------------------------
# nr_cnpj_entidade
# no_ente
# sg_uf
# dt_ano
# dt_mes
#
library(dplyr)
library(httr)
library(jsonlite)
library(tidyr)
#
#
flag <- TRUE
pagina = 0
consulta <- list(sg_uf="RS", dt_ano=2021)
dados_dair_carteira <- data.frame()
#
while(flag){
dair_carteira <- GET("https://apicadprev.economia.gov.br/DAIR_CARTEIRA?", query=append(consulta, list(offset = pagina)))
stop_for_status(dair_carteira, task="Error to connect to the server! Try again later.")
dair_carteira_txt   <- content(dair_carteira, as="text", encoding="UTF-8")
dair_carteira_json  <- fromJSON(dair_carteira_txt, flatten = FALSE)
dair_carteira_df    <- as.data.frame(dair_carteira_json[["results"]][["data"]])
dados_dair_carteira <- bind_rows(dados_dair_carteira, dair_carteira_df)
flag <- dair_carteira_json[["results"]][["rowLimitExceeded"]]
pagina <- pagina + 1
Sys.sleep(1)
}
#
return(dados_dair_carteira)
#
}
#
get_dair_carteira2020 <- function(...){
require(dplyr)
require(httr)
require(jsonlite)
require(tidyr)
#
#
flag <- TRUE
pagina = 0
consulta <- list(sg_uf="RS", dt_ano=2020)
dados_dair_carteira <- data.frame()
#
while(flag){
dair_carteira <- GET("https://apicadprev.economia.gov.br/DAIR_CARTEIRA?", query=append(consulta, list(offset = pagina)))
stop_for_status(dair_carteira, task="Error to connect to the server! Try again later.")
dair_carteira_txt   <- content(dair_carteira, as="text", encoding="UTF-8")
dair_carteira_json  <- fromJSON(dair_carteira_txt, flatten = FALSE)
dair_carteira_df    <- as.data.frame(dair_carteira_json[["results"]][["data"]])
dados_dair_carteira <- bind_rows(dados_dair_carteira, dair_carteira_df)
flag <- dair_carteira_json[["results"]][["rowLimitExceeded"]]
pagina <- pagina + 1
Sys.sleep(1)
}
#
return(dados_dair_carteira)
#
}
get_dair_carteira2019 <- function(...){
require(dplyr)
require(httr)
require(jsonlite)
require(tidyr)
#
#
flag <- TRUE
pagina = 0
consulta <- list(sg_uf="RS", dt_ano=2019)
dados_dair_carteira <- data.frame()
#
while(flag){
dair_carteira <- GET("https://apicadprev.economia.gov.br/DAIR_CARTEIRA?", query=append(consulta, list(offset = pagina)))
stop_for_status(dair_carteira, task="Error to connect to the server! Try again later.")
dair_carteira_txt   <- content(dair_carteira, as="text", encoding="UTF-8")
dair_carteira_json  <- fromJSON(dair_carteira_txt, flatten = FALSE)
dair_carteira_df    <- as.data.frame(dair_carteira_json[["results"]][["data"]])
dados_dair_carteira <- bind_rows(dados_dair_carteira, dair_carteira_df)
flag <- dair_carteira_json[["results"]][["rowLimitExceeded"]]
pagina <- pagina + 1
Sys.sleep(1)
}
#
return(dados_dair_carteira)
#
}
carteira2019 = get_dair_carteira2019()
carteira2020 = get_dair_carteira2020()
carteira2021 = get_dair_carteira2021()
dair_carteira = rbind(carteira2020, carteira2021)
dair_carteira = rbind(dair_carteira, carteira2019)
rm(carteira2019)
rm(carteira2021)
rm(carteira2020)
colnames(dair_carteira)[9] = "cnpj_fundo"
#Fundos
fundos <- read_delim("http://dados.cvm.gov.br/dados/FI/DOC/EXTRATO/DADOS/extrato_fi.csv",
";", escape_double = FALSE, locale = locale(encoding = "ISO-8859-1"),
trim_ws = TRUE)
# letra minuscula
names(fundos) = tolower(names(fundos))
# substituir caracteres cnpj
fundos$cnpj_fundo = gsub(pattern="\\.", "\\", fundos$cnpj_fundo)
fundos$cnpj_fundo = gsub(pattern="\\-", "\\", fundos$cnpj_fundo)
fundos$cnpj_fundo = gsub(pattern="\\/", "\\", fundos$cnpj_fundo)
#filtrar colunas
fundos = fundos %>% dplyr::select("cnpj_fundo", "denom_social","condom","negoc_merc","mercado","publico_alvo","reg_anbima","distrib","polit_invest","fundo_cotas","fundo_espelho","taxa_adm","taxa_custodia_max","taxa_perfm","param_taxa_perfm")
# leitura
fundos2 = read_delim("http://dados.cvm.gov.br/dados/FI/CAD/DADOS/cad_fi.csv",
";", escape_double = FALSE, locale = locale(encoding = "ISO-8859-1"),
trim_ws = TRUE)
# letra minuscula
names(fundos2) = tolower(names(fundos2))
#filtrar colunas
fundos2 = fundos2 %>% dplyr::select("cnpj_fundo","tp_fundo", "sit","admin") %>% dplyr::filter(sit== "EM FUNCIONAMENTO NORMAL")
# substituir caracteres cnpj
fundos2$cnpj_fundo = gsub(pattern="\\.", "\\", fundos2$cnpj_fundo)
fundos2$cnpj_fundo = gsub(pattern="\\-", "\\", fundos2$cnpj_fundo)
fundos2$cnpj_fundo = gsub(pattern="\\/", "\\", fundos2$cnpj_fundo)
# juntar bases fundos e rpps
dair_carteira. = dair_carteira %>% dplyr::left_join(fundos, by="cnpj_fundo")
dair_carteira. = dair_carteira. %>% dplyr::left_join(fundos2, by="cnpj_fundo")
# data
dair_carteira.$data = zoo::as.yearmon(paste(dair_carteira.$dt_ano, dair_carteira.$dt_mes_bimestre), "%Y %m")
dair_carteira.$data= as.Date(paste(dair_carteira.$dt_ano, dair_carteira.$dt_mes_bimestre, 01), "%Y %m %d")
data_max = dair_carteira. %>%
group_by(no_ente) %>%
summarise(max = max(data, na.rm=TRUE)) %>%
ungroup()
dair_carteira. = dair_carteira. %>% left_join(data_max, by="no_ente")
dair_carteira.$max = ifelse(dair_carteira.$data == dair_carteira.$max, 1, 0)
library(readxl)
rpps <- read_excel("rpps - rio grande do sul - telefones & e-mails.xlsx")
rpps = rpps %>% dplyr::select("micro", "nr_cnpj_entidade", "nome")
dair_carteira. = dair_carteira. %>% left_join(rpps, by="nr_cnpj_entidade")
rm(dair_carteira)
save.image("C:/Users/felip/Desktop/GNG/rpps/dair_carteira.RData")
saveRDS(dair_carteira., "C:/Users/felip/Desktop/GNG/rpps/dair_carteira.rds")
# banrisul= dair_carteira. %>% dplyr::filter(admin == "BANRISUL S.A. CORRETORA DE VALORES MOBILIÁRIOS E CÂMBIO")
#
# aguasan= dair_carteira. %>% dplyr::filter(
#   admin == "BANRISUL S.A. CORRETORA DE VALORES MOBILIÁRIOS E CÂMBIO",
#   dt_ano==2021,
#   no_ente == "Água Santa",
#   max == 1)
# load("dair_carteira.RData")
dair_carteira. %>%
filter(sg_uf == "RS",
no_ente == "Alecrim",
data == max(data)) %>%
select(data, no_fundo, admin, vl_total_atual, pc_rpps) %>%
group_by(data, admin) %>%
summarise(vl_total_atual = sum(vl_total_atual, na.rm = TRUE),
pc_rpps = sum(pc_rpps, na.rm=TRUE)) %>%
spread(key = data, value = vl_total_atual) %>%
arrange(desc(pc_rpps))
options(warn = -1, width=180, scipen = 999, OutDec =",", digits=15)
knitr::opts_chunk$set(warning = FALSE, message = FALSE, comment = NA, scipen=999)
library(readr)
library(flexdashboard)
dair_carteira. = readRDS("dair_carteira.rds")
# source("carregar_dados.r")
# rm(dair_carteira)
gc(reset=TRUE)
to.factors <- function(df, variables){
for (variable in variables){
df[[variable]] <- as.factor(df[[variable]])
}
return(df)
}
# Número
to.numeric <- function(df, variables){
for (variable in variables){
df[[variable]] <- as.numeric(df[[variable]])
}
return(df)
}
numeric.vars = list("pc_cmn", "qt_rpps", "vl_atual_ativo", "vl_total_atual", "pc_rpps","vl_patrimonio","pc_patrimonio","taxa_adm", "taxa_custodia_max")
# categorical.vars = list("nr_cnpj_entidade", "sg_uf", "no_ente", "dt_mes_bimestre", "dt_ano", "no_segmento" , "no_tipo_ativo" , "cnpj_fundo" , "no_fundo","denom_social" , "condom", "negoc_merc" , "mercado" , "publico_alvo" , "reg_anbima" , "distrib" , "polit_invest" , "fundo_cotas" , "fundo_espelho" , "taxa_adm" , "param_taxa_perfm" ,"tp_fundo" ,"sit" ,"admin")
# dair_carteira. <- to.factors(df = dair_carteira., variables = categorical.vars)
dair_carteira. <- to.numeric(df = dair_carteira., variables = numeric.vars)
library(dplyr)
library(DT)
library(tidyr)
library(stringr)
library(ggplot2)
library(plotly)
dair_carteira. = dair_carteira. %>%
arrange(desc(pc_rpps))
dair_carteira. %>%
filter(sg_uf == "RS",
no_ente == "Alecrim",
data == max(data)) %>%
select(data, no_fundo, admin, vl_total_atual, pc_rpps) %>%
group_by(data, admin) %>%
summarise(vl_total_atual = sum(vl_total_atual, na.rm = TRUE),
pc_rpps = sum(pc_rpps, na.rm=TRUE)) %>%
spread(key = data, value = vl_total_atual) %>%
arrange(desc(pc_rpps))
runApp()
runApp()
runApp()
getSymbols"BOVA11.SA", src = "yahoo",
auto.assign = FALSE) %>%
hchart
getSymbols"BOVA11.SA", src = "yahoo",
auto.assign = FALSE) %>%
hchart
hchart(getSymbols"BOVA11.SA", src = "yahoo",
auto.assign = FALSE))
getSymbols("BOVA11.SA", src = "yahoo",
auto.assign = FALSE) %>%
hchart
runApp()
runApp()
runApp()
runApp()
?highchartOutput
runApp()
runApp()
hchart(getSymbols("BOVA11.SA", src = "yahoo",
auto.assign = FALSE))
runApp()
runApp('C:/Users/felip/Desktop/GNG/rpps/app2.R')
runApp('C:/Users/felip/Desktop/GNG/rpps/app2.R')
runApp('C:/Users/felip/Desktop/GNG/rpps/app2.R')
runApp('C:/Users/felip/Desktop/GNG/rpps/app2.R')
runApp('C:/Users/felip/Desktop/GNG/rpps/app2.R')
runApp('C:/Users/felip/Desktop/GNG/rpps/app2.R')
runApp('C:/Users/felip/Desktop/GNG/rpps/app2.R')
runApp('C:/Users/felip/Desktop/GNG/rpps/app2.R')
runApp('C:/Users/felip/Desktop/GNG/rpps/app_acoes-master/app2.R')
runApp('C:/Users/felip/Desktop/GNG/rpps/app_acoes-master/app2.R')
runApp()
runApp()
library(shiny)
library(quantmod)
library(shinyWidgets)
library(BatchGetSymbols)
library(highcharter)
library(dplyr)
# SP500
df.sp500 <- GetSP500Stocks()
#tickers <- df.sp500$tickers
colnames(df.sp500)[1]='cod'
colnames(df.sp500)[2]='company'
# IBOVESPA
# df.ibov <- GetIbovStocks()
library(readr)
df.ibov = read_delim("IBOVDia_12-01-22.csv",
";", escape_double = FALSE, locale = locale(encoding = "ISO-8859-1"),
trim_ws = TRUE, skip = 1)
colnames(df.ibov)[2]='company'
colnames(df.ibov)[1]='tickers'
print(df.ibov$tickers)
df.ibov$cod=paste0(df.ibov$tickers, '.SA')
acoes=as.data.frame(rbind(df.ibov[c(6,2)],df.sp500[1:2]))
## ETFs selecioinados
etf = data.frame(
stringsAsFactors = FALSE,
cod = c("BOVA11","IVVB11","SMAL11",
"ECOO11","BRAX11","BOVV11","DIVO11","SMAC11",
"MATB11","IRFM11","IB5M11","FIXA11","IMAB11",
"XFIX11","XINA11","NASD11","EURP11","ACWI11",
"EMEG11","ASIA11","ESGB11","HTEK11","TECK11",
"DNAI11","MILL11","GOVE11"), company = 1
)
etf$cod=paste0(etf$cod, '.SA')
acoes=as.data.frame(rbind(etf, acoes))
runApp()
runApp()
runApp()
symbols <- c("BOVA11.SA", "ABEV3.SA", "LREN3.SA", "PETR4.SA", "VALE3.SA")
prices <- getSymbols(symbols,
from = "2010-01-01",
to = "2020-01-01",
auto.assign = TRUE) %>%
map(~Ad(get(.))) %>%
reduce(merge) %>%
`colnames<-`(symbols)
symbols <- c("BOVA11.SA", "ABEV3.SA")
prices <- getSymbols(symbols,
from = "2010-01-01",
to = "2020-01-01",
auto.assign = TRUE) %>%
map(~Ad(get(.))) %>%
reduce(merge) %>%
`colnames<-`(symbols)
View(prices)
hchart(prices)
prices <- getSymbols("BOVA11.SA", auto.assign = TRUE)
hchart(prices)) %>%
hc_add_series(SMA(Cl(prices), n = 5), yAxis = 0, name = "Fast MA") %>%
hc_add_series(SMA(Cl(prices), n = 50), yAxis = 0, name = "Slow MA")
prices <- getSymbols("BOVA11.SA", auto.assign = FALSE)
hchart(prices)) %>%
hc_add_series(SMA(Cl(prices), n = 5), yAxis = 0, name = "Fast MA") %>%
hc_add_series(SMA(Cl(prices), n = 50), yAxis = 0, name = "Slow MA")
View(prices)
hchart(prices) %>%
hc_add_series(SMA(Cl(prices), n = 5), yAxis = 0, name = "Fast MA") %>%
hc_add_series(SMA(Cl(prices), n = 50), yAxis = 0, name = "Slow MA")
hchart(prices) %>%
hc_add_series(SMA(Cl(prices), n = 5), yAxis = 0, name = "Fast MA") %>%
hc_add_series(SMA(Cl(prices), n = 500), yAxis = 0, name = "Slow MA")
runApp()
runApp()
runApp()
options(warn = -1, width=180, scipen = 999, OutDec =",", digits=15)
knitr::opts_chunk$set(warning = FALSE, message = FALSE, comment = NA, scipen=999)
library(shiny)
library(quantmod)
library(shinyWidgets)
library(BatchGetSymbols)
library(highcharter)
library(dplyr)
# SP500
df.sp500 <- GetSP500Stocks()
#tickers <- df.sp500$tickers
colnames(df.sp500)[1]='cod'
colnames(df.sp500)[2]='company'
# IBOVESPA
# df.ibov <- GetIbovStocks()
library(readr)
df.ibov = read_delim("IBOVDia_12-01-22.csv",
";", escape_double = FALSE, locale = locale(encoding = "ISO-8859-1"),
trim_ws = TRUE, skip = 1)
colnames(df.ibov)[2]='company'
colnames(df.ibov)[1]='tickers'
print(df.ibov$tickers)
df.ibov$cod=paste0(df.ibov$tickers, '.SA')
acoes=as.data.frame(rbind(df.ibov[c(6,2)],df.sp500[1:2]))
## ETFs selecioinados
etf = data.frame(
stringsAsFactors = FALSE,
cod = c("BOVA11","IVVB11","SMAL11",
"ECOO11","BRAX11","BOVV11","DIVO11","SMAC11",
"MATB11","IRFM11","IB5M11","FIXA11","IMAB11",
"XFIX11","XINA11","NASD11","EURP11","ACWI11",
"EMEG11","ASIA11","ESGB11","HTEK11","TECK11",
"DNAI11","MILL11","GOVE11"), company = 1
)
etf$cod=paste0(etf$cod, '.SA')
acoes=as.data.frame(rbind(etf, acoes))
?RSI
table(dair_carteira.$admin)
runApp()
runApp()
View(PETR4.SA)
getSymbols("PETR4.SA", src = "yahoo",
# from = input$fechas[1],
# to = input$fechas[2],
auto.assign = FALSE)
data1 = getSymbols("PETR4.SA", src = "yahoo",
# from = input$fechas[1],
# to = input$fechas[2],
auto.assign = FALSE)
hchart(data()) %>%
hc_add_series(SMA(Cl(data1), n = 10), yAxis = 0, name = "Fast MA 10") %>%
hc_add_series(SMA(Cl(data1), n = 500), yAxis = 0, name = "Slow MA 500")   %>%
hc_add_series(data1[,5], color = "gray", yAxis = 1, name = "Volume", type = "column")
hchart(data1) %>%
hc_add_series(SMA(Cl(data1), n = 10), yAxis = 0, name = "Fast MA 10") %>%
hc_add_series(SMA(Cl(data1), n = 500), yAxis = 0, name = "Slow MA 500")   %>%
hc_add_series(data1[,5], color = "gray", yAxis = 1, name = "Volume", type = "column")
hchart(data1) %>%
hc_add_series(SMA(Cl(data1), n = 10), yAxis = 0, name = "Fast MA 10") %>%
hc_add_series(SMA(Cl(data1), n = 500), yAxis = 0, name = "Slow MA 500")   %>%
hc_add_series(data1[,5], color = "gray", yAxis = 1, name = "Volume", type = "column")
hchart(data1) %>%
hc_add_series(SMA(Cl(data1), n = 10), yAxis = 0, name = "Fast MA 10") %>%
hc_add_series(SMA(Cl(data1), n = 500), yAxis = 0, name = "Slow MA 500")   %>%
hc_add_series(data1[,5], color = "gray", yAxis = 1, name = "Volume", type = "column")
hchart(data1) %>%
hc_add_series(SMA(Cl(data1), n = 10), yAxis = 0, name = "Fast MA 10") %>%
hc_add_series(SMA(Cl(data1), n = 500), yAxis = 0, name = "Slow MA 500")   %>%
hc_add_series(data1[,5], color = "gray", yAxis = 1, name = "Volume", type = "column")
data1[,1]
data1[,5]
hc_add_series(xts(rep(30, NROW(data1), index(data1)), color = hex_to_rgba("blue", 0.7),
yAxis = 2, name = "Buy level")
hc_add_series(xts(rep(30, NROW(data1), index(data1), color = hex_to_rgba("blue", 0.7),
yAxis = 2, name = "Buy level")
hc_add_series(xts(rep(30, NROW(data1), index(data1)), color = hex_to_rgba("blue", 0.7),
yAxis = 2, name = "Buy level")
data1 %>%     hc_add_series(xts(rep(30, NROW(data())), index(data())), color = hex_to_rgba("blue", 0.7),
yAxis = 2, name = "Buy level")
data1 %>% hc_add_series(xts(rep(30, NROW(data1), index(data1)), color = hex_to_rgba("blue", 0.7),
+               yAxis = 2, name = "Buy level")
data1 %>% hc_add_series(xts(rep(30, NROW(data1), index(data1)), color = hex_to_rgba("blue", 0.7),
yAxis = 2, name = "Buy level")
data1 %>% hc_add_series(xts(rep(30, NROW(data1), index(data1))), color = hex_to_rgba("blue", 0.7),
yAxis = 2, name = "Buy level")
data1 %>% hc_add_series(xts(rep(30, NROW(data1), index(data1))), color = hex_to_rgba("blue", 0.7),
yAxis = 2, name = "Buy level")
class(data1)
as.xts(data1) %>% hc_add_series(xts(rep(30, NROW(data1), index(data1))), color = hex_to_rgba("blue", 0.7),
yAxis = 2, name = "Buy level")
autoplot(annualReturn(BOVA11.SA, type='arithmetic'))
hchart(annualReturn(BOVA11.SA, type='arithmetic'))
annualReturn(BOVA11.SA, type='arithmetic')
annualReturn(BOVA11.SA, type='arithmetic')*100
round(annualReturn(BOVA11.SA, type='arithmetic')*100)
round(annualReturn(BOVA11.SA, type='arithmetic')*10,20)
round(annualReturn(BOVA11.SA, type='arithmetic')*100,0)
round(annualReturn(BOVA11.SA, type='arithmetic')*100,2)
hchart(round(annualReturn(BOVA11.SA, type='arithmetic')*100,2))
hchart(round(annualReturn(BOVA11.SA, type='arithmetic')*100,2), color = "gray", yAxis = 1, name = "Volume", type = "column")
hchart(round(annualReturn(BOVA11.SA, type='arithmetic')*100,2),
color = "gray",  name = "Volume", type = "column")
hchart(round(annualReturn(BOVA11.SA, type='arithmetic')*100,2),
color = "gray",  name = "Volume", type = "column")
names(dair_carteira.)
names(dair_carteira.$no_tipo_ativo)
table(dair_carteira.$no_tipo_ativo)
table(dair_carteira.$sit)
table(dair_carteira.$param_taxa_perfm)
class(dair_carteira.$param_taxa_perfm)
dair_carteira. %>%
filter(           no_ente == "Alecrim",
max == 1) %>%
select(data, no_fundo, admin, vl_total_atual, pc_rpps, pc_cmn, taxa_adm, taxa_perfm, cnpj_fundo, no_tipo_ativo, param_taxa_perfm) %>%
group_by(data, no_fundo, cnpj_fundo, admin, no_tipo_ativo, param_taxa_perfm) %>%
summarise(vl_total_atual = sum(vl_total_atual, na.rm = TRUE),
taxa_adm = mean(taxa_adm),
taxa_perform = mean(taxa_perfm),
pc_rpps = sum(pc_rpps, na.rm=TRUE),
pc_cmn =  mean(pc_cmn),
# admin = admin
) %>%
spread(key = data, value = vl_total_atual) %>%
arrange(desc(pc_rpps))
names(dair_carteira.)
table(dair_carteira.$publico_alvo)
table(dair_carteira.$polit_invest)
table(dair_carteira.$distrib)
table(dair_carteira.$reg_anbima)
table(dair_carteira.$mercado)
table(dair_carteira.$condom)
table(dair_carteira.$no_tipo_ativo)
table(dair_carteira.$no_segmento)
server <- function(input, output, session) {
output$numeric <- renderUI({
if (input$type == "slider") {
sliderInput("dynamic", input$label, value = 0, min = 0, max = 10)
} else {
numericInput("dynamic", input$label, value = 0, min = 0, max = 10)
}
})
}
runApp('C:/Users/felip/Downloads/teste.R')
runApp('C:/Users/felip/Downloads/teste.R')
runApp('C:/Users/felip/Downloads/teste.R')
runApp('C:/Users/felip/Downloads/teste.R')
runApp('C:/Users/felip/Downloads/teste.R')
runApp('C:/Users/felip/Downloads/teste.R')
runApp('C:/Users/felip/Downloads/teste.R')
gc()
gc(reset=TRUE)

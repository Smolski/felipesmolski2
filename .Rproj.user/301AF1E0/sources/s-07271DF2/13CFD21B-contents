---
title: "Governos"
output: 
  flexdashboard::flex_dashboard:
  orientation: columns
self_contained: FALSE
theme: bootstrap
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE,
                      message = FALSE,
                      warning = FALSE
                      )
library(BETS)
library(ggthemes)
library(ggplot2)
library(forecast)
library(xts)
library(dplyr)
library(tidyverse)
library(plotly)
```

PIB
=======================================================================

  
Row {.tabset .tabset-fade}
-------------------------------------

### PIB

```{r}

ggplotly(
ggplot(BETSget(22110, data.frame=T), aes(x=date, y=value))+
  geom_line(aes(color="CONSUMO DAS FAMÍLIAS"), size=1)+
  geom_line(data=BETSget(22111, data.frame=T), aes(color="CONSUMO GOVERNO"), size=1)+
  geom_line(data=BETSget(22113, data.frame=T), aes(color="FBKF"), size=1)+
  geom_line(data=BETSget(22114, data.frame=T), aes(color="EXPORTAÇÃO"), size=1)+
  geom_line(data=BETSget(22115, data.frame=T), aes(color="IMPORTAÇÃO"), size=1)+
  labs(color="")+ xlab("Data")+ ylab("Índice")+    
  theme(legend.position = "bottom")+
    annotate("rect", 
             xmin = as.Date("2020-03-01", "%Y-%m-%d"), 
             xmax = as.Date("2020-12-01", "%Y-%m-%d"), 
             ymin=-Inf,  
             ymax=Inf, 
             fill="grey", 
             alpha=0.5)+
    theme(axis.text.x = element_text(size=10),
        axis.text.y = element_text(size=10),  
        axis.title.x = element_text(size=10),
        axis.title.y = element_text(size=10),
        legend.text = element_text(size=10))+
  xlim(as.Date(c("2007-01-01", "2020-12-01"), format="%Y-%m-%d"))+
   scale_color_stata()+theme_stata()
)
```

### PIB (trim)

```{r}
pib.trim = BETSget(22099, data.frame=T)
# pib.trim$var = diff(pib.trim$value, differences = -1)
pib.trim.s <- BETSget(22109, data.frame = TRUE) # Série do PIB trimestral, com ajuste sazonal


pib.trim <- pib.trim %>%
  as_tibble() %>%
  # filter(date >= "1996-01-01") %>%
  mutate(lgdp = log(value),
         dlgdp = 100*(lgdp - lag(lgdp, 4)),
         date = as.Date(date)) %>%
  drop_na()



pib.trim.s <- pib.trim.s %>%
  as_tibble() %>%
  # filter(date >= "1996-01-01") %>%
  mutate(lgdp = log(value),
         dlgdp = 100*(lgdp - lag(lgdp, 1))) %>%
  drop_na()




ggplotly(
ggplot(pib.trim, aes(x=date, y=dlgdp))+
  geom_col()+
  labs(color="")+ xlab("Data")+ ylab("Var. % trimestral")+    
  theme(legend.position = "bottom")+
    annotate("rect", 
             xmin = as.Date("2020-03-01", "%Y-%m-%d"), 
             xmax = as.Date("2021-06-01", "%Y-%m-%d"), 
             ymin=-Inf,  
             ymax=Inf, 
             fill="grey", 
             alpha=0.5)+
    theme(axis.text.x = element_text(size=10),
        axis.text.y = element_text(size=10),  
        axis.title.x = element_text(size=10),
        axis.title.y = element_text(size=10),
        legend.text = element_text(size=10))+
  xlim(as.Date(c("2000-01-01", "2020-12-01"), format="%Y-%m-%d"))+
   scale_color_stata()+
   theme_stata()+
   scale_x_date(breaks = pib.trim$date, date_breaks = "1 year", date_labels = "%Y-%b") + 
   theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
   labs(title='PIB trimestral - Dados observados - \nProduto Interno Bruto a preços de mercado',
       # subtitle='',
       caption='Dados: IPEADATA')
)
```





IPCA
=======================================================================

  
Row {.tabset .tabset-fade}
-------------------------------------

### IPCA (ano)

```{r}
ipca <- as.ts(BETSget(433))
ipca.ano = as.ts(BETSget(13522))


autoplot(window(ipca.ano, start=c(2000,1), frequency = 12), 
         # main = "Índice nacional de preços ao consumidor - amplo (IPCA) - em 12 meses", 
         xlab = "Ano", 
         ylab = "% a.a.")+
  scale_color_stata()+ 
  theme_stata()+
  labs(subtitle='Índice nacional de preços ao consumidor - amplo (IPCA) - em 12 meses',
       # subtitle='',
       caption='Dados: IPEADATA')+
  stat_smooth(
    color = "#FC4E07", fill = "#FC4E07",
    method = "loess"
  )
```




### IPCA (mês)

```{r}
ipca <- as.ts(BETSget(433))

autoplot(window(ipca, start=c(2000,1), frequency = 12), 
         main = "IPCA mês", 
         xlab = "Ano", 
         ylab = "% a.m.")+
  scale_color_stata()+
  theme_stata()+
  scale_color_stata()+ 
  theme_stata()+
  labs(subtitle='Índice nacional de preços ao consumidor - amplo (IPCA) - em 12 meses',
       # subtitle='',
       caption='Dados: IPEADATA')+
  stat_smooth(
    color = "#FC4E07", fill = "#FC4E07",
    method = "loess"
  )
```



  
### Sazonalidade

```{r}

library(forecast)



monthplot(window(ipca, start=c(2000,1), frequency = 12), 
          main = "IPCA sazonal (mensal)", 
          xlab = "Ano", 
          ylab = "% a.m.")+
  scale_color_stata()+
  theme_stata()


```


### Previsão

```{r}
plot(forecast(auto.arima(window(ipca, start=c(2012,1), end=c(2020,12))),7)
     , ylab = "% a.m.")


abline(h=0)
abline(h=0.5)
abline(h=1)
sm <- ma(ipca,order=6)
# lines(sm, col="red")
lines(ipca, col="blue")
lines(window(ipca, start=c(2021,1), end=c(2021,7)), col="green")
```

#### asdf

```{r}
forecast(auto.arima(window(ipca, start=c(2010,1), end=c(2020,12))),7)

```



### media

```{r}
plot(window(ipca, start=c(2000,5)))
sm <- ma(ipca,order=12)
lines(sm,col="red")
# abline(h=0)
# abline(h=0.5)
# abline(h=1)
abline(h=mean(window(ipca, start=c(2000,5))), col= "blue")
abline(h=mean(window(ipca, start=c(2000,5)))+
                 sd(window(ipca, start=c(2000,5)))
               , col= "red")
abline(h=mean(window(ipca, start=c(2000,5)))-
                 sd(window(ipca, start=c(2000,5)))
               , col= "red")
abline(h=mean(window(ipca, start=c(2000,5)))+
                 2*sd(window(ipca, start=c(2000,5)))
               , col= "red")
abline(h=mean(window(ipca, start=c(2000,5)))-
                 2*sd(window(ipca, start=c(2000,5)))
               , col= "red")
abline(h=0)
```


### Decomposição

```{r}
autoplot(decompose(window(ipca, start=c(2000,1))))+
   scale_color_stata()+theme_stata()
```

